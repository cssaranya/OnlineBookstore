openapi: 3.0.1
info:
  title: Online Bookstore API
  version: v1
servers:
- url: http://localhost:8080
security:
- basicAuth: []
paths:
  /users/register:
    post:
      tags:
      - user operations
      summary: Create new user
      description: Creates a new user and saves its details along with encrypted password
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /users/getById/{id}:
    get:
      tags:
      - user operations
      summary: Get user by ID
      description: Retrieve a user by its ID password
      operationId: getUserById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /users/update/{id}:
    put:
      tags:
      - user operations
      summary: Update a user
      description: Using the user ID update some of all its attributes
      operationId: updateUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /books/allBooks:
    get:
      tags:
      - book operations
      summary: Get all books
      description: Retrieve a list of all books
      operationId: getAllBooks
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
  /books/saveBook:
    post:
      tags:
      - book operations
      summary: Save a book
      description: Updates an existing book if the ID is provided and is present in the DB. Otherwise a new book is created with an autogenerated ID 
      operationId: saveBook
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
  /books/bookById/{id}:
    get:
      tags:
      - book operations
      summary: Get book by ID
      description: Retrieves the book with the provided ID
      operationId: getBookById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
  /books/bookByTitle:
    get:
      tags:
      - book operations
      summary: Get book by title
      description: Retrieves the book with the provided book's title
      operationId: getBookByTitle
      parameters:
      - name: title
        in: query
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
  /books/bookByAuthor:
    get:
      tags:
      - book operations
      operationId: getBookByAuthor
      summary: Get book by author
      description: Retrieves the book with the provided book's author
      parameters:
      - name: author
        in: query
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
  /cart/getCart/{userId}:
    get:
      tags:
      - shoppingcart Operations
      summary: Get shopping cart of a user
      description: Retrieves the shopping cart for the user ID
      operationId: getCart
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShoppingCart"
  /cart/createCart/{userId}:
    post:
      tags:
      - shoppingcart Operations
      summary: Create new shopping cart
      description: Creates a new shopping cart for the user only if one does not already exist
      operationId: createShoppingCart
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShoppingCart"
  /cart/add/{userId}/items/{bookId}:
    post:
      tags:
      - shoppingcart Operations
      summary: Add item to shopping cart
      description: Adds a new item to the shopping cart if cart exists. If the item already is in the cart then it increases the item quantity
      operationId: addItemToCart
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: bookId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: quantity
        in: query
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShoppingCart"
  /cart/update/items/{itemId}:
    put:
      tags:
      - shoppingcart Operations
      summary: Update item quantity
      description: Updates the quantity of the item in the shopping cart
      operationId: updateItemQuantity
      parameters:
      - name: itemId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: quantity
        in: query
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartItem"
  /cart/delete/items/{itemId}:
    delete:
      tags:
      - shoppingcart Operations
      summary: Delete item from cart
      description: Deletes the item from the shopping cart if the item is present
      operationId: removeCartItem
      parameters:
      - name: itemId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /orders/getOrder/{userId}:
    get:
      tags:
      - order operations
      summary: Get user orders
      description: Retrieves all the orders belonging to the user
      operationId: getUserOrders
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
  /orders/createOrder/{userId}:
    post:
      tags:
      - order operations
      summary: Creates a new order
      description: Creates an order for a user if items are present in the user's shopping cart
      operationId: createOrder
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
  /orders/orderDetails/{orderId}:
    get:
      tags:
      - order operations
      summary: Get order details
      description: Retrieve details of a particular order
      operationId: getOrderDetails
      parameters:
      - name: orderId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        password:
          type: string
        email:
          type: string
        address:
          type: string
        phonenumber:
          type: string
    Book:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        author:
          type: string
        price:
          type: number
          format: double
    CartItem:
      type: object
      properties:
        id:
          type: integer
          format: int64
        shoppingcartId:
          type: integer
          format: int64
        book:
          $ref: "#/components/schemas/Book"
        quantity:
          type: integer
          format: int32
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user:
          $ref: "#/components/schemas/User"
        orderDate:
          type: string
          format: date-time
        status:
          type: string
          enum:
          - ACTIVE
          - PLACED
          - CANCELLED
          - FAILED
        orderamount:
          type: number
          format: double
        items:
          type: array
          items:
            $ref: "#/components/schemas/OrderItem"
    OrderItem:
      type: object
      properties:
        id:
          type: integer
          format: int64
        book:
          $ref: "#/components/schemas/Book"
        quantity:
          type: integer
          format: int32
    ShoppingCart:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user:
          $ref: "#/components/schemas/User"
        items:
          type: array
          items:
            $ref: "#/components/schemas/CartItem"
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
